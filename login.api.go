// Code generated by protoc-gen-go_api(github.com/dev-openapi/protoc-gen-go_api version=v1.0.0). DO NOT EDIT.
// source: douyin-miniapp/login.proto

package douyin_miniapp

import (
	context "context"
	fmt "fmt"
	io "io"
	json "encoding/json"
	bytes "bytes"
	http "net/http"
	strings "strings"
)
// Reference imports to suppress errors if they are not otherwise used.
var _ = context.Background
var _ = http.NewRequest
var _ = io.Copy
var _ = bytes.Compare
var _ = json.Marshal
var _ = strings.Compare


// Client API for Login service

type LoginService interface {
	// Code2Session  登录 https://developer.open-douyin.com/docs/resource/zh-CN/mini-app/develop/server/log-in/code-2-session
	Code2Session(ctx context.Context, in *Code2SessionReq, opts ...Option) (*Code2SessionRes, error)
}

type loginService struct {
	// opts
	opts *Options
}

func NewLoginService(opts ...Option) LoginService {
	opt := newOptions(opts...)
	if len(opt.addr) <= 0 {
		opt.addr = "https://developer.toutiao.com"
	}
	return &loginService {
		opts: opt,
	}
}


func (c *loginService) Code2Session(ctx context.Context, in *Code2SessionReq, opts ...Option) (*Code2SessionRes, error) {
	var res Code2SessionRes
	// options
	opt := buildOptions(c.opts, opts...)
	headers := make(map[string]string)
	// route
	rawURL := fmt.Sprintf("%s/api/apps/v2/jscode2session", opt.addr)

	// body
	var body io.Reader
	bs, err := json.Marshal(in)
	if err != nil {
		return nil, err
	}
	body = bytes.NewReader(bs)
	headers["Content-Type"] = "application/json"

	req, err := http.NewRequest("POST", rawURL, body)
	if err != nil {
		return nil, err
	}
	
	// header
	for k, v := range headers {
		req.Header.Set(k, v)
	}
	resp, err := opt.DoRequest(opt.client, req)
	if err != nil {
		return nil, err
	}
	err = opt.DoResponse(resp, &res)
	return &res, err 

}
